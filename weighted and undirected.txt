create weighted and undirected graph using adjacency list

code:
def addNode(v):
    if v in graph:
        print(v,"available")
    else:
        graph[v]=[]
def show():
    for x in graph:
        print(x,":",graph[x])
def addEdge(node1,node2,W):
    if node1 not in graph:
        print(node1,"not present")
    elif node2 not in graph:
        print(node2,"not present")
    else:
        graph[node1].append((node2,W))
        graph[node2].append((node1,W))
graph={}
while True:
    W=int(input("ennterweight"))
    print()
    print("1.add node\n2.add edge\n3.print list\n4.exit")
    ch=int(input("enter"))
    if ch==1:
        v=input("enter")
        addNode(v)
    elif ch==2:
        node1=input("enter node1")
        node2=input("enter node 2")
        addEdge(node1,node2,W)
    elif ch==3:
        show()
    elif ch==4:
        break
    else:
        print("invalid")

output:
ennterweight10

1.add node
2.add edge
3.print list
4.exit
enter1
entera
ennterweight20

1.add node
2.add edge
3.print list
4.exit
enter1
enterb
ennterweight30

1.add node
2.add edge
3.print list
4.exit
enter1
enterc
ennterweight25

1.add node
2.add edge
3.print list
4.exit
enter3
a : []
b : []
c : []
ennterweight27

1.add node
2.add edge
3.print list
4.exit
enter2
enter node1a
enter node 2b
ennterweight22

1.add node
2.add edge
3.print list
4.exit
enter2
enter node1b
enter node 2c
ennterweight34

1.add node
2.add edge
3.print list
4.exit
enter3
a : [('b', 27)]
b : [('a', 27), ('c', 22)]
c : [('b', 22)]